%p Repos Index

#repos-list
	
	-# list.js search and sort
	%input.search.input-text
	%span Sort by
	-# %span.sort.button(data-sort="name") name
	%span.sort.button(data-sort="watchers")watchers
	
	-# tag controls
	#tags
		#tags_languages
			%span Languages:&nbsp;
		#tags_frameworks
			%span Frameworks:&nbsp;
		#tags_solutions
			%span Solutions:&nbsp;

	-# list.js ul
	%ul.list
		-# @repos.each
		- @repos.each do |repo|
			-# repo
			-# filtrify tags in data-attributes
			%li(data-languages="#{tag_list(repo.languages)}" data-frameworks="#{tag_list(repo.frameworks)}" data-solutions="#{tag_list(repo.solutions)}")
				-# owner and name
				%a(href="/repo/#{repo.ident}")
					%span.owner= repo.owner
					\ /
					%span.name= repo.name

				-# description
				%p.description= repo.description

				-# watchers and forks (not displayed, only for sorting purposes)
				%p.watchers(style="display: none")= repo.watchers
				%p.forks(style="display: none")= repo.forks

				-# links (github_url and homepage (if available))
				%a.github_url(href="#{repo.github_url}") Github &rarr;
				%a.homepage(href="#{homepage_with_fallback_github_url(repo.homepage, repo.github_url)}" style="#{display_homepage?(repo.homepage, repo.github_url)}") Homepage &rarr;
				-# do later: text homepage durch url ersetzen (evtl. problematisch bei github unterseiten mit langen links)

				-# wiki_text
				-# do later: evtl. trunkieren oder gleich nur trunkierte version auslesen, die bei mercury update gespeichert und sanitized wird
				-# darf keinerlei html tags mehr enthalten, für dem moment werden diese hier gestript
				%p.wiki_text= strip_tags(repo.wiki_text)

				-# if interesting do later: aktivitätsanzeige
				-# if interesting do later: watchers anzeige

%p Repos can be added using this very special bookmarklet (best draw it to your browser's bookmarks bar)

#bookmarket
	%a.button(href="javascript: open('http://localhost:3000/repo/add?url=' + location.href)") Post to repos